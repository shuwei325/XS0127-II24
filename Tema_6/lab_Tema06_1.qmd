---
title: "Tema VI: Modelos ARIMA de Box&Jenkins - Lab 1"
subtitle: "Curso: Series Cronológicas"
author: 
  name: "Shu Wei Chou Chen"
  affiliation: "Escuela de Estadística, UCR"
format: 
  html:
    theme: 
      light: [sketchy, code_font_light.scss]
      dark: [sketchy, code_font_dark.scss]
lang: es
editor: visual
toc: true
toc-depth: 3
toc-location: left
toc-title: "Contenido"
toc-expand: 1
number-sections: true
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE, fig.width = 4, fig.height = 4)
```

# librerías

```{r , message=FALSE , warning=FALSE}
library(ggplot2)
library(forecast)
library(fpp2)
library(astsa)
library(car)
library(TSA)
library(tseries)
library(urca)
```

# Modelo AR(1)

## Funciones para simular un AR(1)

```{r}
set.seed(1000)
gen_ar1a <- function(N = 150, phi1 = 0.8, sigma2 = 1) {
  a <- rnorm(N,0,sigma2) 
  y <- as.numeric(0)
  y[1] <- a[1]
  for(i in 2:N){
    y[i] <- phi1*y[i-1]+a[i]
  }
  return(y)
}                     

gen_ar1b <- function(N = 150, C=0, phi1 = 0.8, sigma2 = 1) {
  NN <- 1000
  a <- rnorm(NN+N,0,sigma2) 
  y <- as.numeric(0)

  y[1] <- a[1]
  for(i in 2:(NN+N)){
    y[i] <- C + phi1*y[i-1] + a[i]
  }
  return(y[NN:(NN+N)])
}
```

## AR(1)

```{r}
phi1=0.6
y <- gen_ar1b(N=150,C=5,phi1=phi1,sigma2=1)
```

## Simulación y el análisis descriptivo

```{r}
# descriptiva
ts.plot(y)
mean(y)  #promedio teórico: 5/(1-phi1)
acf(y,lag.max=30)
pacf(y)
acf2(y)   #library(astsa)
```

## Estimación del modelo AR(1)

```{r}
mod0a <- Arima(y, order=c(1,0,0),method="CSS-ML")
mod0b <- Arima(y, order=c(1,0,0),method="ML")
mod0c <- Arima(y, order=c(1,0,0),method="CSS")
summary(mod0a)
summary(mod0b)
summary(mod0c)
```

No está estimando el intercepto C, sino la media del proceso.

```{r,warning=FALSE}
mean(y)
5/(1-phi1) #media teórica
```

## El paquete `tseries`

Este paquete permite la estimación del intercepto.

```{r}
mod0e<-tseries::arma(y,order=c(1,0),include.intercept=TRUE)
summary(mod0e)
```

## El diagnóstico del modelo AR(1)

```{r}
#devolvemos al mod0c
res<-mod0c$residuals
ts.plot(res)
acf(res)
pacf(res)
acf2(res)
tsdiag(mod0c)    #library(stats)
checkresiduals(mod0c,lag=10)
checkresiduals(mod0c,lag=30)
```

## Normalidad

```{r}
shapiro.test(res)
jarque.bera.test(res)
qqPlot(res)
```

## Pronóstico

```{r}
forecast(mod0c)
autoplot(forecast(mod0c))
```

## Simulación con `arima.sim`

```{r}
#AR(1)
m<-5 #la media del proceso
y1 <- arima.sim(n = 150, model = list(order = c(1,0,0),ar = c(0.8)),sd=3,rand.gen= rnorm) + m
ts.plot(y1)
acf2(y1)
mod1<- forecast::Arima(y1, order = c(1, 0, 0))
summary(mod1)
```

# Modelo AR(2)

```{r}
y2 <- arima.sim(n = 150, model = list(order = c(2,0,0),ar = c(0.6,-0.28)),sd=1,rand.gen= rnorm) 

ts.plot(y2)

ar2.st <- arima(y2, c(2, 0, 0), include.mean=FALSE,
                transform.pars=FALSE, method="ML")
ar2.st$coef
polyroot(c(1, -ar2.st$coef))
Mod(polyroot(c(1, -ar2.st$coef)))
root.comp <- Im(polyroot(c(1, -ar2.st$coef)))
root.real <- Re(polyroot(c(1, -ar2.st$coef)))
# Plotting the roots in a unit circle
x <- seq(-1, 1, length = 1000)
y1 <- sqrt(1- x^2)
y2 <- -sqrt(1- x^2)
plot(c(x, x), c(y1, y2), xlab='Parte Real',
     ylab='Parte Compleja', type='l',
     main='Circulo unitario', ylim=c(-2, 2), xlim=c(-2, 2))
abline(h=0)
abline(v=0)
points(Re(polyroot(c(1, -ar2.st$coef))),
       Im(polyroot(c(1, -ar2.st$coef))), pch=19)
legend(-1.5, -1.5, legend="Raíces del AR(2)", pch=19)

#Otra posibilidad es usar el inverso de las raíces.
autoplot(ar2.st)
```

# Modelo ARMA(1,1)

```{r}
y3<-arima.sim(n = 150, list(order = c(1,0,1),ar = c(0.88), ma = c(-0.23)),
              sd = sqrt(2))

ts.plot(y3)
acf2(y3)

#ARMA(1,1)
mod3<- forecast::Arima(y3, order = c(1, 0, 1))
summary(mod3)
checkresiduals(mod3,lag=10)

#AR(1)
mod3ar1<- forecast::Arima(y3, order = c(1, 0, 0))
summary(mod3ar1)
checkresiduals(mod3ar1,lag=10)

mod3$aic
mod3ar1$aic

```

## Identificación con auto.arima

```{r}
#procedimiento automático (pero tener mucho cuidado!!!)
auto.arima(y3,ic="aicc") #por defecto
auto.arima(y3,ic="aic")
auto.arima(y3,ic="bic")
```

# Contraste de raíz unitaria

## Probamos con dos tamaño de series

```{r}
TT=150
# prueben con TT=500
```

## AR(1)

```{r}
y1 <- arima.sim(n = TT, model = list(order = c(1,0,0),ar = c(0.8)),sd=3,rand.gen= rnorm)
ts.plot(y1)
adf.test(y1) 
```

## ARIMA(0,1,0)

```{r}
y2 <- arima.sim(n = TT, model = list(order = c(0,1,0),sd=1,rand.gen= rnorm))
ts.plot(y2)
acf2(y2)
adf.test(y2)
```

# Ejemplos reales

## Ejemplo con graduados de ITCR de 1975 a 2002

```{r}
itcrgrad<-read.csv("ITCR.csv",sep=",") 
y<-ts(itcrgrad$graduados,start=1975)

ts.plot(y) 
acf2(y)
```

Indicación de no estacionariedad. Como ejemplo vamos a ajustar un AR(1) ignorando la no estacionariedad. (1 rezago de f.a.c.p. significativo)

```{r}
try(mod0 <- Arima(y, order=c(1,0,0)))

try(mod0a <- Arima(y, order=c(1,0,0),method="CSS-ML"))
mod0b <- Arima(y, order=c(1,0,0),method="ML")
mod0c <- Arima(y, order=c(1,0,0),method="CSS")
summary(mod0b)
summary(mod0c)
```

```{r}
adf.test(y) #no estacionario
dif.y<-diff(y)

ts.plot(dif.y)
acf(dif.y)
pacf(dif.y)

adf.test(dif.y)

mod1 <- Arima(y, order=c(0,1,0))
summary(mod1)
```

### Diagnóstico

```{r}
res<-mod1$res
ts.plot(res)
acf(res)
pacf(res)

tsdiag(mod1)
checkresiduals(mod1,lag=10)
```

#### Normalidad

```{r}
shapiro.test(res)
jarque.bera.test(res)
qqPlot(res)
```

#### Pronóstico

```{r}
forecast(mod1)
autoplot(forecast(mod1))
```

#### Identificación automática

```{r}
auto.arima(y,ic="aicc", allowdrift = FALSE) #por defecto
auto.arima(y,ic="aic", allowdrift = FALSE)
auto.arima(y,ic="bic", allowdrift = FALSE)
```

```{r}
auto.arima(y,ic="aicc") #por defecto
auto.arima(y,ic="aic")
auto.arima(y,ic="bic")
```

¿Qué es un modelo con desvío? $ARIMA(0,1,0)$ se define como: $(1-B)Y_t = C + a_t$

## Tasa de desempleo

Ejemplo 1-3 tomado de Bernhard (2008): Tasa de desempleo

```{r}
data(npext)
y <- ts(na.omit(npext$unemploy), start=1909, end=1988,
        frequency=1)
plot(y, ylab="unemployment rate (logarithm)")
acf2(y,ylim=c(-1, 1))
```

### ARMA(2,0)

```{r}
arma20 <- Arima(y, order=c(2, 0, 0))
summary(arma20)
```

#### Log-verosimilitud

```{r}
#AIC
loglik <- arma20$loglik
(aic<- -2*loglik+2*(2+1+1))
arma20$aic

#AICC
TT <- length(y)
(aicc <- aic+(2*(2+1+1)*(2+1+2))/(TT-2-1-2))
arma20$aicc

#BIC
(bic <- aic+(log(TT)-2)*(2+1+1))
arma20$bic
```

#### Diagnóstico

```{r}
res20 <- residuals(arma20)
tsdiag(arma20)
checkresiduals(arma20)

# Raíces del polinomio autorregresivo
arma20$coef
autoplot(arma20)

#Normalidad
shapiro.test(res20)
qqPlot(res)
```

### ARMA(1,1)

```{r}
arma11 <- Arima(y, order = c(1, 0, 1))
summary(arma11)
tsdiag(arma11)

c(arma20$aic,arma20$aicc,arma20$bic)
c(arma11$aic,arma11$aicc,arma11$bic)


res11 <- residuals(arma11)
ts.plot(res11)
shapiro.test(res11)
tsdiag(arma11)
checkresiduals(arma11)
autoplot(arma11)

arma20$aic
arma11$aic
```

### `auto.arima()`

```{r}
arma.auto<-auto.arima(y, max.p = 3, max.q = 3, start.p = 1,
                      start.q = 1, ic = "aic")

arma.auto
```

#### Pronóstico

```{r}
plot(forecast(arma11))
```

#### Comprobación de cálculo del pronóstico

```{r}

arma11.pred <- predict(arma11, n.ahead = 10)
predict <- ts(c(rep(NA, length(y) - 1), y[length(y)],
                arma11.pred$pred), start = 1909,
              frequency = 1)
upper <- ts(c(rep(NA, length(y) - 1), y[length(y)],
              arma11.pred$pred + 2 * arma11.pred$se),
            start = 1909, frequency = 1)
lower <- ts(c(rep(NA, length(y) - 1), y[length(y)],
              arma11.pred$pred - 2 * arma11.pred$se),
            start = 1909, frequency = 1)
observed <- ts(c(y, rep(NA, 10)), start=1909,
               frequency = 1)
## Plot of actual and forecasted values
plot(observed, type = "l",
     ylab = "Actual and predicted values", xlab = "")
lines(predict, col = "blue", lty = 2)
lines(lower, col = "red", lty = 5)
lines(upper, col = "red", lty = 5)
abline(v = 1988, col = "gray", lty = 3)
```

## Producto nacional bruto

Producto nacional bruto, U.S. (en mil millones y son datos trimestrales de 1947 a 2002) los datos fueron ajustada estacionalmente. (Ejemplo 3.40, Shumway&Stoffer)

```{r}
y<-astsa::gnp
ts.plot(y)
acf2(y, 50)
```

### Contraste de Dickey-Fuller

```{r}
adf.test(y)
ts.plot(diff(y))
ts.plot(log(y))
dif.log.y = diff(log(y))      # taza de crecimiento
plot(dif.log.y)
acf2(dif.log.y, 24)
adf.test(dif.log.y)
```

### Identificación de modelos

```{r}
#AR(1)
moda<-Arima(dif.log.y, order=c(1,0,0))
summary(moda)
autoplot(moda)

#MA(2)
modb<-Arima(dif.log.y, order=c(0,0,2))
summary(modb)
autoplot(modb)
```

```{r}
checkresiduals(moda)
checkresiduals(modb)

c(moda$aic,moda$aicc,moda$bic)
c(modb$aic,modb$aicc,modb$bic)


modc<-Arima(log(y),order=c(1,1,0),include.drift=TRUE)
summary(modc)

modd<-Arima(y,order=c(1,1,0),include.drift=TRUE,lambda=0)
summary(modd)

mode<-Arima(y,order=c(0,1,2),include.drift=TRUE,lambda=0)
summary(mode)
```

```{r}
checkresiduals(modd,lag=10)
checkresiduals(mode,lag=10)
```

```{r}
res<-modd$res

ts.plot(res)
acf(res)
pacf(res)

#Normalidad
shapiro.test(res)
jarque.bera.test(res)
qqPlot(res)
```
